@page "/"

@using Codes
@using Microsoft.AspNetCore.Authorization
@using SoftwareTest.Models
@* @attribute [Authorize(Policy = "AuthenticatedUser")] *@
@inject IServiceProvider _serviceProvider;
@inject AuthenticationStateProvider _authenticationStateProvider;
@inject Models.TodolistContext _todoContext;
@inject Codes.HashingHandlers _hashinHandlers;
@inject Codes.SymetricEncrypting _systemCrypt;
@inject CprService _cprService;
@inject TodoListService _todoListService;
@inject Codes.AsymetricEncryptHandler _asymetricEncryptHandler;
@inject Codes.RoleHandler _roleHandler;



<div class="container-fluid">
    <div class="container">
        <PageTitle>Home</PageTitle>
       <AuthorizeView>
           <Authorized>
                @if (_isAdmin)
                {
                    <div class="alert alert-info mb-2">You are an admin</div>
                }
                else
                {
                    <div class="alert alert-info mb-2">You are not an admin</div>
                }
           </Authorized>

       </AuthorizeView>          
        <AuthorizeView>
            <Authorized>
                <div class=" alert alert-success mb-2">You are logged in @userName</div>
                <div class="alert alert-info">Existing CPR: @existingCpr</div>
                <div class="col-md-3 form-group mb-2">
                    <label for="cprInput">Enter CPR Number:</label>
                    <input id="cprInput" class="form-control" @bind="cprNumber" maxlength="10" />
                </div>
                <button class="btn btn-primary mb-2" @onclick="AddCpr">Submit</button>

                <div class="col-md-3 form-group mb-2">
                    <label for="typeInput">Select type:</label>
                    <select class="form-control" id="type" @bind="selectedReturnType">
                        <option value="String">String</option>
                        <option value="ByteArray">ByteArray</option>
                        <option value="Int">Int</option>
                        <option value="UTFString">UTFString</option>
                        <option value="HexString">HexString</option>
                    </select>
                </div>

                @if (!string.IsNullOrEmpty(existingCpr))
                {                   

                    @if (isCprMatched.HasValue && isCprMatched.Value)
                    {
                        <div class="alert alert-success mb-2">CPR Matched!</div>

                        <div class="col-md-3 form-group mb-2">
                            <label for="newItemInput">Add item to list:</label>
                            <input id="newItemInput" class="form-control" @bind="newItem" />
                        </div>
                        <button class="btn btn-primary mb-2" @onclick="AddItemToList">Submit</button>

                        <h3>Todo List</h3>
                        <ul class="col-md-3 list-group">
                            @if (userItems != null && userItems.Count > 0)
                            {
                                @foreach (var item in userItems)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <div>
                                            <label>@_asymetricEncryptHandler.Decrypt(@item.Items)</label>
                                        </div>
                                        <div>
                                            @if (_isAdmin)
                                            {
                                                <button class="btn btn-danger btn-sm" style="margin-left: 10px;" @onclick="() => DeleteItem(item)">Delete</button>
                                            }
                                        </div>
                                    </li>
                                }
                            }
                        </ul>
                    }
                }

                @if (showAddCprText && !isCprMatched.HasValue)
                {
                    <div class="col-md-3 alert alert-info mb-2">Added CPR to the database: @cprNumber</div>
                }

                @if (isCprMatched.HasValue && !isCprMatched.Value)
                {
                    <div class="col-md-3 alert alert-danger mb-2">CPR does not match!</div>
                }
            </Authorized>

            <NotAuthorized>
                <div class="alert alert-warning mb-2">You are not logged in</div>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>

@code {
    public bool _isAuthenticated;
    public bool _isAdmin;
    public string userName { get; set; }
    private string cprNumber;
    private string existingCpr;
    private bool? isCprMatched;
    private bool showAddCprText;
    private string newItem;
    private List<TodolostTb> userItems;
    private string selectedReturnType;
    private ReturnTypes returnType;

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        userName = user.Identity.Name;

        if (user.Identity != null)
            _isAuthenticated = user.Identity.IsAuthenticated;
        _isAdmin = user.IsInRole("Admin");

        // Check if the user already has a CPR in the database
        existingCpr = _todoContext.Cprs
            .Where(c => c.User == userName)
            .Select(c => c.Cprnr)
            .FirstOrDefault();


        //await _roleHandler.CreateUserRole("admin@admin.dk", "Admin", _serviceProvider);

        // Retrieve the user's items
        userItems = await _todoListService.GetTodoListItems(userName);


    }

    private async Task AddCpr()
    {
        // Check if there is no CPR for the user
        if (string.IsNullOrEmpty(existingCpr))
        {
            // Add a new CPR to the database
            await _cprService.AddCprToDatabase(userName, cprNumber, returnType);
            existingCpr = cprNumber; // Set existingCpr to the newly added CPR
            isCprMatched = true; // Indicate that the CPR is matched
            showAddCprText = true; // Display the "Added CPR to the database" message
        }
        else
        {
            returnType = Enum.TryParse<ReturnTypes>(selectedReturnType, out var parsedReturnType)
    ? parsedReturnType
    : Enum.GetValues(typeof(ReturnTypes)).Cast<ReturnTypes>().FirstOrDefault();
            // Check if the entered CPR matches the stored CPR in the database
            bool isMatched = _hashinHandlers.HMACVerify(cprNumber, existingCpr, returnType);
            isCprMatched = isMatched; // Set isCprMatched based on the verification result

            if (!isMatched)
            {
                // If CPR does not match, display the text
                showAddCprText = false;
            }
        }
    }

    private async Task AddItemToList()
    {
        // Check if the item is not empty
        if (!string.IsNullOrEmpty(newItem))
        {
            // Encrypt the new item using asymmetric encryption
            string encryptedNewItem = _asymetricEncryptHandler.Encrypt(newItem);

            // Add the encrypted item to the TodoList
            await _todoListService.AddItemToTodoList(userName, encryptedNewItem);

            newItem = string.Empty;

            userItems = await _todoListService.GetTodoListItems(userName);

        }
    }
    private async Task DeleteItem(TodolostTb itemToDelete)
    {
        // Assuming TodolostTb has an ID property or a unique identifier
        await _todoListService.DeleteItemFromTodoList(itemToDelete.Id);

        // Update the list of userItems after deletion
        userItems.Remove(itemToDelete);
    }

}
