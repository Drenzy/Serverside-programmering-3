@page "/"

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Policy = "AuthenticatedUser")]


@inject AuthenticationStateProvider _AuthenticationStateProvider; 
@inject Models.TodolistContext _todoContext;
@inject Codes.HashinHandlers _hasinHandlers;

<PageTitle>Home</PageTitle>

<AuthorizeView>
    <Authorized>
        <div> You are loggined in</div>
        <button @onclick="CreateFile">Create File</button>
    </Authorized>
    <NotAuthorized>
        <div> You are not loggined in</div>
    </NotAuthorized>
</AuthorizeView>

Welcome to your new app.

@code {
    //Use in unit Test
    public bool _isAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        var autState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();   

        var user = autState.User;



        if(user.Identity != null)
            _isAuthenticated = user.Identity.IsAuthenticated;

        string hasedString = _hasinHandlers.MD5Hasing("333333333");
        string hasedString2 = _hasinHandlers.MD5Hasing("333333333");

        string hasedSHAString = _hasinHandlers.SHAHash("333333333");
        string hasedSHAString2 = _hasinHandlers.SHAHash("333333333");

        string hasedHMACtring = _hasinHandlers.HMACHash("333333333");
        string hasedHMACtring2 = _hasinHandlers.HMACHash("333333333");

        string hasedhPKBFD2String = _hasinHandlers.PBKDF2Hash("333333333");
        string hasedhPKBFD2String2 = _hasinHandlers.PBKDF2Hash("333333333");

        Codes.HashinHandlers hh = new Codes.HashinHandlers();
        string hashedString = hh.BCRYPTHash("333333333");

        bool matchedBcippp = hh.BCRYPTVerify("333333333", hashedString);


            bool matched = hasedString == hasedString2;
            bool matchedSHA = hasedSHAString == hasedSHAString2;
            bool matchedHMAC = hasedHMACtring == hasedHMACtring2;
            bool matchedPKBDF2 = hasedhPKBFD2String == hasedhPKBFD2String2;
    }

    public async Task<bool> CreateFile()
    {
        try
        {
            // Get the path to the Files folder within the project's data directory
            string filesFolderPath = Path.Combine("Data");

            // Ensure that the folder exists, create it if it doesn't
            if (!Directory.Exists(filesFolderPath))
            {
                Directory.CreateDirectory(filesFolderPath);
            }

            // Generate a unique file name
            string fileName = Guid.NewGuid().ToString() + ".txt";
            var filePath = Path.Combine(filesFolderPath, fileName);

            // Write some default content to the file
            string fileContent = "This is a newly created file.";

            // Write file content to server
            System.IO.File.WriteAllText(filePath, fileContent);

            Console.WriteLine("Created");

            return true;
        }
        catch (Exception ex)
        {
            // Log the exception or handle it accordingly
            Console.WriteLine("Failed");
            return false;
        }
    }
}