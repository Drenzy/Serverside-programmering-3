@page "/"

@using Codes
@using Microsoft.AspNetCore.Authorization
@using SoftwareTest.Models
@* @attribute [Authorize(Policy = "AuthenticatedUser")] *@
@inject IServiceProvider _serviceProvider;


@inject AuthenticationStateProvider _authenticationStateProvider;
@inject Models.TodolistContext _todoContext;
@inject Codes.HashingHandlers _hashinHandlers;
@inject Codes.SymetricEncrypting _systemCrypt;
@inject CprService _cprService;
@inject TodoListService _todoListService;
@inject Codes.AsymetricEncryptHandler _asymetricEncryptHandler;
@inject Codes.RoleHandler _roleHandler;


<PageTitle>Home</PageTitle>

@if(_isAdmin) 
{
    <div>You are an admin</div>

}
else
{
    <div>You are not an admin</div>
}
<AuthorizeView>
    <Authorized>
        <div>You are logged in @userName</div>
        <button @onclick="AddCpr">Submit</button>
        <label for="cprInput">Enter CPR Number:</label>
        <input id="cprInput" @bind="cprNumber" maxlength="10" />

        <div></div>

        <label for="typeInput">select type:</label>
        <select name="type" id="type" @bind="selectedReturnType">
            <option value="String">String</option>
            <option value="ByteArray">ByteArray</option>
            <option value="Int">Int</option>
            <option value="UTFString">UTFString</option>
            <option value="HexString">HexString</option>
        </select>

        @if (!string.IsNullOrEmpty(existingCpr))
        {
            <div>Existing CPR: @existingCpr</div>

            @if (isCprMatched.HasValue && isCprMatched.Value)
            {
                <div>CPR Matched!</div>

                <label for="newItemInput">Add item to list:</label>
                <input id="newItemInput" @bind="newItem" />
                <button @onclick="AddItemToList">Submit</button>

                <h3>Todo List</h3>
                <ul>
                    @if (userItems != null && userItems.Count > 0)
                    {
                        @foreach (var item in userItems)
                        {
                            <li>@_asymetricEncryptHandler.Decrypt(@item.Items)</li>
                        }
                    }
                    
                </ul>
            }
            
        }
        @if (showAddCprText && !isCprMatched.HasValue)
        {
            <div>Added CPR to the database: @cprNumber</div>
        }

        @if (isCprMatched.HasValue && !isCprMatched.Value)
        {
            <div>CPR does not match!</div>
        }
       
    </Authorized>
    <NotAuthorized>
        <div>You are not logged in</div>
    </NotAuthorized>
</AuthorizeView>

@code {
    public bool _isAuthenticated;
    public bool _isAdmin;
    public string userName { get; set; }
    private string cprNumber;
    private string existingCpr;
    private bool? isCprMatched;
    private bool showAddCprText;
    private string newItem;
    private List<TodolostTb> userItems;
    private string selectedReturnType;
    private ReturnTypes returnType;

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        userName = user.Identity.Name;

        if (user.Identity != null)
            _isAuthenticated = user.Identity.IsAuthenticated;
        _isAdmin = user.IsInRole("Admin");

        // Check if the user already has a CPR in the database
        existingCpr = _todoContext.Cprs
            .Where(c => c.User == userName)
            .Select(c => c.Cprnr)
            .FirstOrDefault();


       // await _roleHandler.CreateUserRole("dan@emil.dk", "Admin", _serviceProvider);

    // Retrieve the user's items
        userItems = await _todoListService.GetTodoListItems(userName);

        
    }

    private async Task AddCpr()
    {
        // Check if there is no CPR for the user
        if (string.IsNullOrEmpty(existingCpr))
        {
            // Add a new CPR to the database
            await _cprService.AddCprToDatabase(userName, cprNumber, returnType);
            existingCpr = cprNumber; // Set existingCpr to the newly added CPR
            isCprMatched = true; // Indicate that the CPR is matched
            showAddCprText = true; // Display the "Added CPR to the database" message
        }
        else
        {
            returnType = Enum.Parse<ReturnTypes>(selectedReturnType);
            // Check if the entered CPR matches the stored CPR in the database
            bool isMatched = _hashinHandlers.HMACVerify(cprNumber, existingCpr, returnType);
            isCprMatched = isMatched; // Set isCprMatched based on the verification result

            if (!isMatched)
            {
                // If CPR does not match, display the text
                showAddCprText = false;
            }
        }
    }

    private async Task AddItemToList()
    {
        // Check if the item is not empty
        if (!string.IsNullOrEmpty(newItem))
        {
            // Encrypt the new item using asymmetric encryption
            string encryptedNewItem = _asymetricEncryptHandler.Encrypt(newItem);

            // Add the encrypted item to the TodoList
            await _todoListService.AddItemToTodoList(userName, encryptedNewItem);

            newItem = string.Empty;
            
            userItems = await _todoListService.GetTodoListItems(userName);

        }
    }

}
