@page "/"

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Policy = "AuthenticatedUser")]


@inject AuthenticationStateProvider _AuthenticationStateProvider; 
<PageTitle>Home</PageTitle>

<AuthorizeView>
    <Authorized>
        <div> You are loggined in</div>
        <button @onclick="CreateFile">Create File</button>
    </Authorized>
    <NotAuthorized>
        <div> You are not loggined in</div>
    </NotAuthorized>
</AuthorizeView>

Welcome to your new app.

@code {
    //Use in unit Test
    public bool _isAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        var autState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();   

        var user = autState.User;

        if(user.Identity != null)
            _isAuthenticated = user.Identity.IsAuthenticated;
    }

    public async Task<bool> CreateFile()
    {
        try
        {
            // Get the path to the Files folder within the project's data directory
            string filesFolderPath = Path.Combine("Data");

            // Ensure that the folder exists, create it if it doesn't
            if (!Directory.Exists(filesFolderPath))
            {
                Directory.CreateDirectory(filesFolderPath);
            }

            // Generate a unique file name
            string fileName = Guid.NewGuid().ToString() + ".txt";
            var filePath = Path.Combine(filesFolderPath, fileName);

            // Write some default content to the file
            string fileContent = "This is a newly created file.";

            // Write file content to server
            System.IO.File.WriteAllText(filePath, fileContent);

            Console.WriteLine("Created");

            return true;
        }
        catch (Exception ex)
        {
            // Log the exception or handle it accordingly
            Console.WriteLine("Failed");
            return false;
        }
    }
}