@page "/"

@using Microsoft.AspNetCore.Authorization
@using SoftwareTest.Models
@attribute [Authorize(Policy = "AuthenticatedUser")]

@inject AuthenticationStateProvider _AuthenticationStateProvider;
@inject Models.TodolistContext _todoContext;
@inject Codes.HashinHandlers _hashinHandlers;
@inject CprService _cprService;

<PageTitle>Home</PageTitle>

<AuthorizeView>
    <Authorized>
        <div>You are logged in @userName</div>
        @if (!string.IsNullOrEmpty(existingCpr))
        {
            <div>Existing CPR: @existingCpr</div>
        }
        <button @onclick="CreateFile">Create File</button>
        <label for="cprInput">Enter CPR Number:</label>
        <input id="cprInput" @bind="cprNumber" />
        <button @onclick="AddCpr">Add CPR</button>
    </Authorized>
    <NotAuthorized>
        <div>You are not logged in</div>
    </NotAuthorized>
</AuthorizeView>

Welcome to your new app.

@code {
    // Use in unit Test
    public bool _isAuthenticated;

    public string userName { get; set; }

    private string cprNumber;

    private string existingCpr;



    protected override async Task OnInitializedAsync()
    {
        

        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();

        var user = authState.User;
        
        userName = user.Identity.Name;

        if (user.Identity != null)
            _isAuthenticated = user.Identity.IsAuthenticated;

        // Uncomment the lines below if needed for testing
        // string hashedString = _hashinHandlers.MD5Hasing("333333333");
        // string hashedSHAString = _hashinHandlers.SHAHash("333333333");
        // string hashedHMACString = _hashinHandlers.HMACHash("333333333");
        // string hashedPBKDF2String = _hashinHandlers.PBKDF2Hash("333333333");
        // Codes.HashinHandlers hh = new Codes.HashinHandlers();
        // string hashedBCryptString = hh.BCRYPTHash("333333333");
        // bool matchedBCrypt = hh.BCRYPTVerify("333333333", hashedBCryptString);
        // bool matched = hashedString == hashedString2;
        // bool matchedSHA = hashedSHAString == hashedSHAString2;
        // bool matchedHMAC = hashedHMACString == hashedHMACString2;
        // bool matchedPBKDF2 = hashedPBKDF2String == hashedPBKDF2String2;

        // Check if the user already has a CPR in the database
        existingCpr = _todoContext.Cprs
            .Where(c => c.User == userName)
            .Select(c => c.Cprnr)
            .FirstOrDefault();
    }

    public async Task CreateFile()
    {
        try
        {
            // Get the path to the Files folder within the project's data directory
            string filesFolderPath = Path.Combine("Data");

            // Ensure that the folder exists, create it if it doesn't
            if (!Directory.Exists(filesFolderPath))
            {
                Directory.CreateDirectory(filesFolderPath);
            }

            // Generate a unique file name
            string fileName = Guid.NewGuid().ToString() + ".txt";
            var filePath = Path.Combine(filesFolderPath, fileName);

            // Write some default content to the file
            string fileContent = "This is a newly created file.";

            // Write file content to the server
            System.IO.File.WriteAllText(filePath, fileContent);

            Console.WriteLine("Created");

            // Add the file creation logic here if needed

        }
        catch (Exception ex)
        {
            // Log the exception or handle it accordingly
            Console.WriteLine($"Failed: {ex.Message}");
        }
    }

    private async Task AddCpr()
    {
        await _cprService.AddCprToDatabase(userName, cprNumber);
        // Refresh the existing CPR after adding a new one
        existingCpr = _todoContext.Cprs
            .Where(c => c.User == userName)
            .Select(c => c.Cprnr)
            .FirstOrDefault();
    }
}
